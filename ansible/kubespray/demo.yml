---
- hosts: k8s-cluster:etcd:calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults}
    - { role: kubernetes/preinstall, tags: preinstall }
    - { role: "container-engine", tags: "container-engine", when: deploy_container_engine|default(true) }
    - { role: download, tags: download, when: "not skip_downloads" }
  environment: "{{ proxy_env }}"

#- hosts: etcd
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  roles:
#    - { role: kubespray-defaults}
#    - role: etcd
#      tags: etcd
#      vars:
#        etcd_cluster_setup: true
#        etcd_events_cluster_setup: "{{ etcd_events_cluster_enabled }}"
#      when: not etcd_kubeadm_enabled| default(false)

#- hosts: k8s-cluster:calico-rr
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  roles:
#    - { role: kubespray-defaults}
#    - role: etcd
#      tags: etcd
#      vars:
#        etcd_cluster_setup: false
#        etcd_events_cluster_setup: false
#      when: not etcd_kubeadm_enabled| default(false)



#- hosts: k8s-cluster
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  roles:
#    - { role: kubespray-defaults}
#    - { role: kubernetes/node, tags: node }
#  environment: "{{ proxy_env }}"

#- hosts: kube-master
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  roles:
#    - { role: kubespray-defaults}
#    - { role: kubernetes/master, tags: master }
#    - { role: kubernetes/client, tags: client }
#    - { role: kubernetes-apps/cluster_roles, tags: cluster-roles }
#

#- hosts: k8s-cluster
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  roles:
#    - { role: dire/context, action: load}
#    - { role: kubespray-defaults}
#    - { role: kubernetes/kubeadm, tags: kubeadm}
#    - { role: network_plugin, tags: network }
#
#- hosts: all
#  roles:
#    - { role: dire/context, action: save}
#
#- hosts: kube-master[0]
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  pre_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: load
#  post_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: save
#  roles:
#    - { role: kubespray-defaults}
#    - { role: kubernetes-apps/rotate_tokens, tags: rotate_tokens, when: "secret_changed|default(false)" }
#    - { role: win_nodes/kubernetes_patch, tags: ["master", "win_nodes"]}
#
#- hosts: kube-master
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  pre_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: load
#  post_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: save
#  roles:
#    - { role: kubespray-defaults}
#    - { role: kubernetes-apps/network_plugin, tags: network }
#    - { role: kubernetes-apps/policy_controller, tags: policy-controller }
#    - { role: kubernetes-apps/ingress_controller, tags: ingress-controller }
#    - { role: kubernetes-apps/external_provisioner, tags: external-provisioner }
#
#- hosts: calico-rr
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  pre_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: load
#  post_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: save
#  roles:
#    - { role: kubespray-defaults}
#    - { role: network_plugin/calico/rr, tags: network }
#
#- hosts: kube-master
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  pre_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: load
#  post_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: save
#  roles:
#    - { role: kubespray-defaults}
#    - { role: kubernetes-apps, tags: apps }
#  environment: "{{ proxy_env }}"

#- hosts: k8s-cluster
#  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
#  pre_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: load
#  post_tasks:
#    - include_role:
#        name: dire/context
#        tasks_from: save
#  roles:
#    - { role: kubespray-defaults}
#    - { role: kubernetes/preinstall, when: "dns_mode != 'none' and resolvconf_mode == 'host_resolvconf'", tags: resolvconf, dns_late: true }
